// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/GpsSettings.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "POGOProtos/Settings/GpsSettings.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GpsSettingsRoot

@implementation GpsSettingsRoot

@end

#pragma mark - GpsSettingsRoot_FileDescriptor

static GPBFileDescriptor *GpsSettingsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Settings"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GpsSettings

@implementation GpsSettings

@dynamic drivingWarningSpeedMetersPerSecond;
@dynamic drivingWarningCooldownMinutes;
@dynamic drivingSpeedSampleIntervalSeconds;
@dynamic drivingSpeedSampleCount;

typedef struct GpsSettings__storage_ {
  uint32_t _has_storage_[1];
  float drivingWarningSpeedMetersPerSecond;
  float drivingWarningCooldownMinutes;
  float drivingSpeedSampleIntervalSeconds;
  int32_t drivingSpeedSampleCount;
} GpsSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "drivingWarningSpeedMetersPerSecond",
        .dataTypeSpecific.className = NULL,
        .number = GpsSettings_FieldNumber_DrivingWarningSpeedMetersPerSecond,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GpsSettings__storage_, drivingWarningSpeedMetersPerSecond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "drivingWarningCooldownMinutes",
        .dataTypeSpecific.className = NULL,
        .number = GpsSettings_FieldNumber_DrivingWarningCooldownMinutes,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GpsSettings__storage_, drivingWarningCooldownMinutes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "drivingSpeedSampleIntervalSeconds",
        .dataTypeSpecific.className = NULL,
        .number = GpsSettings_FieldNumber_DrivingSpeedSampleIntervalSeconds,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GpsSettings__storage_, drivingSpeedSampleIntervalSeconds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "drivingSpeedSampleCount",
        .dataTypeSpecific.className = NULL,
        .number = GpsSettings_FieldNumber_DrivingSpeedSampleCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GpsSettings__storage_, drivingSpeedSampleCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GpsSettings class]
                                     rootClass:[GpsSettingsRoot class]
                                          file:GpsSettingsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GpsSettings__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
