// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Envelopes/RequestEnvelope.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "POGOProtos/Networking/Envelopes/RequestEnvelope.pbobjc.h"
 #import "POGOProtos/Networking/Requests/Request.pbobjc.h"
 #import "POGOProtos/Networking/Envelopes/AuthTicket.pbobjc.h"
 #import "POGOProtos/Networking/Platform/PlatformRequestType.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - RequestEnvelopeRoot

@implementation RequestEnvelopeRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[RequestRoot extensionRegistry]];
    [registry addExtensions:[AuthTicketRoot extensionRegistry]];
    [registry addExtensions:[PlatformRequestTypeRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - RequestEnvelopeRoot_FileDescriptor

static GPBFileDescriptor *RequestEnvelopeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Networking.Envelopes"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RequestEnvelope

@implementation RequestEnvelope

@dynamic statusCode;
@dynamic requestId;
@dynamic requestsArray, requestsArray_Count;
@dynamic platformRequestsArray, platformRequestsArray_Count;
@dynamic latitude;
@dynamic longitude;
@dynamic accuracy;
@dynamic hasAuthInfo, authInfo;
@dynamic hasAuthTicket, authTicket;
@dynamic msSinceLastLocationfix;

typedef struct RequestEnvelope__storage_ {
  uint32_t _has_storage_[1];
  int32_t statusCode;
  NSMutableArray *requestsArray;
  NSMutableArray *platformRequestsArray;
  RequestEnvelope_AuthInfo *authInfo;
  AuthTicket *authTicket;
  uint64_t requestId;
  double latitude;
  double longitude;
  double accuracy;
  int64_t msSinceLastLocationfix;
} RequestEnvelope__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "statusCode",
        .dataTypeSpecific.className = NULL,
        .number = RequestEnvelope_FieldNumber_StatusCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEnvelope__storage_, statusCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = RequestEnvelope_FieldNumber_RequestId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestEnvelope__storage_, requestId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "requestsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Request),
        .number = RequestEnvelope_FieldNumber_RequestsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestEnvelope__storage_, requestsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "platformRequestsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RequestEnvelope_PlatformRequest),
        .number = RequestEnvelope_FieldNumber_PlatformRequestsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestEnvelope__storage_, platformRequestsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = RequestEnvelope_FieldNumber_Latitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestEnvelope__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = RequestEnvelope_FieldNumber_Longitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RequestEnvelope__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "accuracy",
        .dataTypeSpecific.className = NULL,
        .number = RequestEnvelope_FieldNumber_Accuracy,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RequestEnvelope__storage_, accuracy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "authInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(RequestEnvelope_AuthInfo),
        .number = RequestEnvelope_FieldNumber_AuthInfo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RequestEnvelope__storage_, authInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "authTicket",
        .dataTypeSpecific.className = GPBStringifySymbol(AuthTicket),
        .number = RequestEnvelope_FieldNumber_AuthTicket,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RequestEnvelope__storage_, authTicket),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msSinceLastLocationfix",
        .dataTypeSpecific.className = NULL,
        .number = RequestEnvelope_FieldNumber_MsSinceLastLocationfix,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RequestEnvelope__storage_, msSinceLastLocationfix),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEnvelope class]
                                     rootClass:[RequestEnvelopeRoot class]
                                          file:RequestEnvelopeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEnvelope__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestEnvelope_AuthInfo

@implementation RequestEnvelope_AuthInfo

@dynamic provider;
@dynamic hasToken, token;

typedef struct RequestEnvelope_AuthInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *provider;
  RequestEnvelope_AuthInfo_JWT *token;
} RequestEnvelope_AuthInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "provider",
        .dataTypeSpecific.className = NULL,
        .number = RequestEnvelope_AuthInfo_FieldNumber_Provider,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEnvelope_AuthInfo__storage_, provider),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(RequestEnvelope_AuthInfo_JWT),
        .number = RequestEnvelope_AuthInfo_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestEnvelope_AuthInfo__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEnvelope_AuthInfo class]
                                     rootClass:[RequestEnvelopeRoot class]
                                          file:RequestEnvelopeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEnvelope_AuthInfo__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestEnvelope_AuthInfo_JWT

@implementation RequestEnvelope_AuthInfo_JWT

@dynamic contents;
@dynamic unknown2;

typedef struct RequestEnvelope_AuthInfo_JWT__storage_ {
  uint32_t _has_storage_[1];
  int32_t unknown2;
  NSString *contents;
} RequestEnvelope_AuthInfo_JWT__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contents",
        .dataTypeSpecific.className = NULL,
        .number = RequestEnvelope_AuthInfo_JWT_FieldNumber_Contents,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEnvelope_AuthInfo_JWT__storage_, contents),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unknown2",
        .dataTypeSpecific.className = NULL,
        .number = RequestEnvelope_AuthInfo_JWT_FieldNumber_Unknown2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestEnvelope_AuthInfo_JWT__storage_, unknown2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEnvelope_AuthInfo_JWT class]
                                     rootClass:[RequestEnvelopeRoot class]
                                          file:RequestEnvelopeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEnvelope_AuthInfo_JWT__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestEnvelope_PlatformRequest

@implementation RequestEnvelope_PlatformRequest

@dynamic type;
@dynamic requestMessage;

typedef struct RequestEnvelope_PlatformRequest__storage_ {
  uint32_t _has_storage_[1];
  PlatformRequestType type;
  NSData *requestMessage;
} RequestEnvelope_PlatformRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PlatformRequestType_EnumDescriptor,
        .number = RequestEnvelope_PlatformRequest_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestEnvelope_PlatformRequest__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "requestMessage",
        .dataTypeSpecific.className = NULL,
        .number = RequestEnvelope_PlatformRequest_FieldNumber_RequestMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestEnvelope_PlatformRequest__storage_, requestMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestEnvelope_PlatformRequest class]
                                     rootClass:[RequestEnvelopeRoot class]
                                          file:RequestEnvelopeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestEnvelope_PlatformRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RequestEnvelope_PlatformRequest_Type_RawValue(RequestEnvelope_PlatformRequest *message) {
  GPBDescriptor *descriptor = [RequestEnvelope_PlatformRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RequestEnvelope_PlatformRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetRequestEnvelope_PlatformRequest_Type_RawValue(RequestEnvelope_PlatformRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RequestEnvelope_PlatformRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RequestEnvelope_PlatformRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
